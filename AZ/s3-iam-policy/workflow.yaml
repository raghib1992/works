name: IAM Policy for S3 Bucket

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Comma-separated list of clusters name'
        required: true
        type: string

env:
  # Sets environment variable for internet access
  http_proxy: http://azpse.astrazeneca.net:9480
  https_proxy: http://azpse.astrazeneca.net:9480
  no_proxy: 10.0.0.0/8,172.29.0.0/8,astrazeneca.net

jobs:
  get-iam-policy:
    runs-on:
      - self-hosted
      - azimuth-azimuth-profiles
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set APT Proxy Configuration
        run: |
          echo "Acquire::http::proxy \"${{ env.http_proxy }}\";" | sudo tee -a /etc/apt/apt.conf
          echo "Acquire::https::proxy \"${{ env.https_proxy }}\";" | sudo tee -a /etc/apt/apt.conf
          echo "Acquire::ftp::proxy \"${{ env.http_proxy }}\";" | sudo tee -a /etc/apt/apt.conf
          echo "Acquire::http::proxy::no_proxy \"${{ env.no_proxy }}\";" | sudo tee -a /etc/apt/apt.conf

      - name: Install Kubectl
        id: kubectl-install
        uses: azure/setup-kubectl@v4.0.0
        with:
          version: 'v1.25.0'

      - name: Configure kubeconfig
        id: kubeconfig-setup
        run: |
          echo $KUBECONFIG | base64 -d > /tmp/kubeconfig
        env:
          KUBECONFIG: ${{ secrets.KUBE_CONFIG }}
      
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: install python packages
        run: |
          python -m pip install --upgrade pip
          pip install argparse Jinja2==3.1.4 kubernetes
      
      - name: Generate s3 IAM Policy
        id: policy
        run: |
          python generate_s3_iam_policy.py -c ${{ inputs.clusterName }}
        working-directory: ./scripts
        env:
          KUBECONFIG: /tmp/kubeconfig

      - name: Zip the policy file
        env:
          CLUSTER_NAME: ${{ inputs.clusterName }}
        run: |
          set +x

          cd policy
          IFS=',' read -r -a cluster_name <<< "$CLUSTER_NAME"
          delete_failure=false

          for CLUSTER in "${cluster_name[@]}"; do
              if [[ "$CLUSTER" == "dev" ]]; then
                zip -r brown.zip "$CLUSTER"
              else
                zip -r "${CLUSTER}.zip" "$CLUSTER"
              fi
          done

      - name: Get cluster wise policy zipped file
        uses: actions/upload-artifact@v4
        with:
          name: policy_zip_file
          path: policy/*.zip



      
