name: Update AWS secrets in mlpipeline-minio secret

on:
  workflow_dispatch:
    inputs:
      clusterName:
        type: choice
        required: true
        description: Select Cluster
        default: 'dev' 
        options:
        - dev
        - iron
        - jade
        - bronze
        - lead
        - onyx
      namespace:
        description: Namespace required only for Bronze Cluster
        type: string
        required: false
      awsAccessKey:
        type: string
        description: AWS ACCESS KEY required for relavant namespace in Bronze Cluster
      awsSecretKey:
        type: string
        description: AWS SECRET KEY required for relavant namespace in Bronze Cluster

env:
  ## Sets environment variable for internet access
  http_proxy: http://azpse.astrazeneca.net:9480
  https_proxy: http://azpse.astrazeneca.net:9480
  no_proxy: 10.0.0.0/8,172.29.0.0/8,astrazeneca.net

jobs:
  update_mlpipeline_secret:
    runs-on:
      - self-hosted
      - azimuth-azimuth-profiles
    steps: 
      - name: Set APT Proxy Configuration
        run: |
          echo "Acquire::http::proxy \"${{ env.http_proxy }}\";" | sudo tee -a /etc/apt/apt.conf
          echo "Acquire::https::proxy \"${{ env.https_proxy }}\";" | sudo tee -a /etc/apt/apt.conf
          echo "Acquire::ftp::proxy \"${{ env.http_proxy }}\";" | sudo tee -a /etc/apt/apt.conf
          echo "Acquire::http::proxy::no_proxy \"${{ env.no_proxy }}\";" | sudo tee -a /etc/apt/apt.conf

      - name: Install Kubectl
        id: kubectl-install
        uses: azure/setup-kubectl@v4.0.0
        with:
          version: 'v1.25.0'
      
      - name: Configure kubeconfig
        id: kubeconfig-setup
        run: |
          echo $KUBECONFIG | base64 -d > /tmp/kubeconfig
        env:
          KUBECONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Update AWS Credential in Secret
        id: update-secret
        env:
          ACCESS_KEY: ${{ inputs.awsAccessKey }}
          SECRET_KEY: ${{ inputs.awsSecretKey }}
          KUBECONFIG: "/tmp/kubeconfig"
          NAMESPACE: ${{ inputs.namespace}}
          DEPLOYMENT_NAME: "ml-pipeline-ui-artifact"
          SECRET_NAME: "mlpipeline-minio-artifact"
        run: |
          echo "Switching to ${{ inputs.clusterName }} cluster"
          if [[ ${{ inputs.clusterName }} == 'dev' ]]
          then 
            kubectl config use-context ai-ops-brown@kubernetes
          else
            kubectl config use-context ai-ops-${{ inputs.clusterName }}@kubernetes
          fi

          if [[ ${{ inputs.clusterName }} != "bronze" ]]
          then
            # Update secret values in all profile
            
            # Get profiles
            echo "Getting profiles"
            PROFILES=$(kubectl get profile -o json)

            # Check if profiles exist
            if [ -z "$PROFILES" ]; then
              echo "Error: No profiles found"
              exit 1
            fi

            # Get namespaces from profiles
            NAMESPACES=$(echo $PROFILES | jq -r '.items[].metadata.name' | paste -sd "," -)
            echo "Found namespaces: $NAMESPACES"

            # Copy secret value of mlpipeline-minio-artifact in kubeflow namespace
            echo "Copying secret from $SECRET_NAME in kubeflow namespace"
            SOURCE_SECRET=$(kubectl get secret -n kubeflow mlpipeline-minio-artifact -o json)

            for ns in $(echo $NAMESPACES | tr ',' ' ')
            do
              echo "Updating secret $SECRET_NAME in $ns namespace"
              TARGET_SECRET=$(kubectl get secret -n $ns $SECRET_NAME -o json)
              UPDATED_SECRET=$(echo $TARGET_SECRET | jq --argjson source "$SOURCE_SECRET" '.data.accesskey = $source.data.accesskey | .data.secretkey = $source.data.secretkey')
              echo $UPDATED_SECRET | kubectl apply -f -

              # Restart Deployment
              echo "Restarting $DEPLOYMENT_NAME deployment in $ns namespace"
              kubectl -n $ns rollout restart deploy/$DEPLOYMENT_NAME
            done
          else
            # Base64 encode the access key and secret key
            ACCESS_KEY_BASE64=$(echo -n $ACCESS_KEY | base64)
            SECRET_KEY_BASE64=$(echo -n $SECRET_KEY | base64)

            # Update secret values in the specified namespace in Bronze Cluster
            echo "Updating secret $SECRET_NAME in $NAMESPACE namespace"
            kubectl patch secret $SECRET_NAME -n $NAMESPACE \
                    --type='json' -p='[{"op": "replace", "path": "/data/accesskey", "value": "'"$ACCESS_KEY_BASE64"'"}]'
            kubectl patch secret $SECRET_NAME -n $NAMESPACE \
                    --type='json' -p='[{"op": "replace", "path": "/data/secretkey", "value": "'"$SECRET_KEY_BASE64"'"}]'

            # Restart Deployment
            echo "Restarting $DEPLOYMENT_NAME deployment in $NAMESPACE namespace"
            kubectl -n $NAMESPACE rollout restart deploy/$DEPLOYMENT_NAME
          fi
